package otp.api;

import com.sun.net.httpserver.Filter;
import com.sun.net.httpserver.HttpExchange;
import com.sun.net.httpserver.Filter.Chain;
import otp.model.User;
import otp.model.UserRole;
import otp.util.HttpUtils;
import otp.util.TokenManager;

import java.io.IOException;

/**
 * Фильтр аутентификации и авторизации для HTTP-контроллеров.
 * 
 * Основные функции:
 * 1. Аутентификация
 *    - Проверка JWT токенов
 *    - Валидация подписи
 *    - Контроль срока действия
 *    - Извлечение данных
 *    - Проверка формата
 *    - Валидация структуры
 *    - Контроль целостности
 * 
 * 2. Авторизация
 *    - Проверка ролей
 *    - Контроль доступа
 *    - Управление правами
 *    - Аудит действий
 *    - Валидация привилегий
 *    - Контроль уровня доступа
 *    - Мониторинг операций
 * 
 * 3. Безопасность
 *    - Защита от подделки
 *    - Контроль сессий
 *    - Логирование
 *    - Обработка ошибок
 *    - Предотвращение атак
 *    - Аудит безопасности
 *    - Мониторинг активности
 * 
 * 4. Управление доступом
 *    - Контроль привилегий
 *    - Разграничение прав
 *    - Проверка разрешений
 *    - Управление сессиями
 *    - Контроль активности
 *    - Мониторинг доступа
 *    - Аудит операций
 * 
 * Процесс проверки:
 * 1. Извлечение токена
 *    - Проверка заголовка
 *    - Формат: "Bearer <token>"
 *    - Валидация формата
 *    - Подготовка к проверке
 *    - Контроль структуры
 *    - Проверка наличия
 *    - Валидация контекста
 * 
 * 2. Аутентификация
 *    - Проверка токена
 *    - Получение пользователя
 *    - Валидация данных
 *    - Проверка активности
 *    - Контроль срока
 *    - Валидация подписи
 *    - Проверка контекста
 * 
 * 3. Авторизация
 *    - Проверка роли
 *    - Сравнение уровней
 *    - Контроль доступа
 *    - Логирование
 *    - Валидация привилегий
 *    - Контроль контекста
 *    - Аудит действий
 * 
 * Возможные ответы:
 * - 401 Unauthorized
 *   * Отсутствует токен
 *   * Неверный формат
 *   * Истек срок действия
 *   * Недействительная подпись
 *   * Неверная структура
 *   * Отсутствует заголовок
 *   * Неверный контекст
 * 
 * - 403 Forbidden
 *   * Недостаточные права
 *   * Неверная роль
 *   * Ограниченный доступ
 *   * Блокировка
 *   * Неверный уровень
 *   * Ограничение контекста
 *   * Запрет операции
 * 
 * - 200 OK
 *   * Успешная аутентификация
 *   * Достаточные права
 *   * Доступ разрешен
 *   * Запрос обработан
 *   * Валидация пройдена
 *   * Контроль успешен
 *   * Операция выполнена
 */
public class AuthFilter extends Filter {
    private final UserRole requiredRole;

    /**
     * Создает новый экземпляр фильтра с указанной требуемой ролью.
     * 
     * Процесс создания:
     * 1. Инициализация
     *    - Сохранение роли
     *    - Проверка валидности
     *    - Настройка параметров
     *    - Подготовка к работе
     *    - Контроль состояния
     *    - Валидация контекста
     *    - Логирование
     * 
     * 2. Валидация
     *    - Проверка роли
     *    - Контроль значений
     *    - Настройка прав
     *    - Обработка ошибок
     *    - Проверка контекста
     *    - Валидация параметров
     *    - Контроль состояния
     * 
     * @param requiredRole минимальная роль пользователя для доступа к ресурсу
     * @throws IllegalArgumentException если роль не указана
     */
    public AuthFilter(UserRole requiredRole) {
        this.requiredRole = requiredRole;
    }

    /**
     * Возвращает описание фильтра.
     * 
     * Формат описания:
     * 1. Тип фильтра
     *    - Назначение
     *    - Функциональность
     *    - Ограничения
     *    - Требования
     *    - Контекст
     *    - Параметры
     *    - Условия
     * 
     * 2. Параметры
     *    - Требуемая роль
     *    - Уровень доступа
     *    - Ограничения
     *    - Условия
     *    - Контекст
     *    - Валидация
     *    - Контроль
     * 
     * @return строковое описание фильтра с указанием требуемой роли
     */
    @Override
    public String description() {
        return "Фильтр аутентификации и проверки роли (ROLE >= " + requiredRole + ")";
    }

    /**
     * Выполняет фильтрацию HTTP запроса.
     * 
     * Процесс фильтрации:
     * 1. Проверка заголовков
     *    - Извлечение токена
     *    - Валидация формата
     *    - Проверка наличия
     *    - Подготовка данных
     *    - Контроль структуры
     *    - Валидация контекста
     *    - Проверка целостности
     * 
     * 2. Аутентификация
     *    - Проверка токена
     *    - Получение пользователя
     *    - Валидация данных
     *    - Проверка активности
     *    - Контроль срока
     *    - Валидация подписи
     *    - Проверка контекста
     * 
     * 3. Авторизация
     *    - Проверка роли
     *    - Сравнение уровней
     *    - Контроль доступа
     *    - Логирование
     *    - Валидация привилегий
     *    - Контроль контекста
     *    - Аудит действий
     * 
     * 4. Обработка результата
     *    - Успех: передача запроса
     *    - Ошибка: возврат статуса
     *    - Логирование
     *    - Очистка данных
     *    - Контроль состояния
     *    - Валидация результата
     *    - Аудит операции
     * 
     * @param exchange объект HTTP обмена
     * @param chain цепочка фильтров
     * @throws IOException при ошибках ввода/вывода
     */
    @Override
    public void doFilter(HttpExchange exchange, Chain chain) throws IOException {
        String authHeader = exchange.getRequestHeaders().getFirst("Authorization");
        if (authHeader == null || !authHeader.startsWith("Bearer ")) {
            HttpUtils.sendError(exchange, 401, "Missing or invalid Authorization header");
            return;
        }
        String token = authHeader.substring(7);
        // Получаем пользователя по токену
        User user = TokenManager.getUser(token);
        if (user == null) {
            HttpUtils.sendError(exchange, 401, "Invalid or expired token");
            return;
        }
        if (user.getRole().ordinal() < requiredRole.ordinal()) {
            HttpUtils.sendError(exchange, 403, "Forbidden");
            return;
        }
        exchange.setAttribute("user", user);
        chain.doFilter(exchange);
    }
}
