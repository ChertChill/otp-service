package otp.config;

import java.io.IOException;
import java.io.InputStream;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.util.Properties;

/**
 * Менеджер подключений к базе данных.
 * 
 * Основные функции:
 * 1. Управление подключениями
 *    - Загрузка конфигурации
 *    - Создание соединений
 *    - Закрытие ресурсов
 *    - Контроль состояния
 * 
 * 2. Конфигурация
 *    - Чтение параметров из файла
 *    - Валидация настроек
 *    - Обработка ошибок
 *    - Управление ресурсами
 * 
 * 3. Безопасность
 *    - Защита учетных данных
 *    - Безопасное закрытие ресурсов
 *    - Обработка исключений
 *    - Логирование ошибок
 * 
 * Процесс работы:
 * 1. Инициализация
 *    - Загрузка конфигурации
 *    - Проверка параметров
 *    - Подготовка ресурсов
 *    - Обработка ошибок
 * 
 * 2. Управление соединениями
 *    - Создание подключений
 *    - Проверка доступности
 *    - Контроль состояния
 *    - Освобождение ресурсов
 * 
 * 3. Обработка ошибок
 *    - Логирование проблем
 *    - Закрытие ресурсов
 *    - Информирование системы
 *    - Восстановление состояния
 * 
 * Безопасность:
 * - Защита учетных данных
 * - Безопасное закрытие ресурсов
 * - Обработка исключений
 * - Логирование ошибок
 * - Контроль доступа
 * - Аудит операций
 */
public class DatabaseManager {
    /** Путь к файлу конфигурации в classpath */
    private static final String PROPS_FILE = "application.properties";

    /** Параметры подключения к БД */
    private static String url;
    private static String user;
    private static String password;

    /** 
     * Статический блок инициализации.
     * 
     * Процесс инициализации:
     * 1. Загрузка конфигурации
     *    - Чтение файла
     *    - Парсинг параметров
     *    - Валидация значений
     *    - Сохранение настроек
     * 
     * 2. Проверка параметров
     *    - URL подключения
     *    - Имя пользователя
     *    - Пароль
     *    - Дополнительные настройки
     * 
     * 3. Обработка ошибок
     *    - Файл не найден
     *    - Ошибка чтения
     *    - Неверный формат
     *    - Отсутствие параметров
     * 
     * Возможные ошибки:
     * - FileNotFoundException: файл не найден
     * - IOException: ошибка чтения
     * - ExceptionInInitializerError: ошибка инициализации
     * - RuntimeException: неверные параметры
     */
    static {
        try (InputStream is = DatabaseManager.class
                .getClassLoader()
                .getResourceAsStream(PROPS_FILE)) {
            if (is == null) {
                throw new RuntimeException("Не найден файл " + PROPS_FILE + " в classpath");
            }
            Properties props = new Properties();
            props.load(is);
            url = props.getProperty("db.url");
            user = props.getProperty("db.user");
            password = props.getProperty("db.password");
        } catch (IOException e) {
            throw new ExceptionInInitializerError(
                    "Ошибка загрузки параметров БД из " + PROPS_FILE + ": " + e.getMessage());
        }
    }

    /**
     * Создает новое подключение к базе данных.
     * 
     * Процесс создания:
     * 1. Проверка параметров
     *    - Валидация URL
     *    - Проверка учетных данных
     *    - Контроль настроек
     *    - Подготовка параметров
     * 
     * 2. Установка соединения
     *    - Создание подключения
     *    - Проверка доступности
     *    - Настройка параметров
     *    - Инициализация сессии
     * 
     * 3. Обработка результата
     *    - Проверка соединения
     *    - Настройка таймаутов
     *    - Установка параметров
     *    - Возврат объекта
     * 
     * @return Connection активное соединение с БД
     * @throws SQLException если не удалось установить соединение
     */
    public static Connection getConnection() throws SQLException {
        return DriverManager.getConnection(url, user, password);
    }

    /**
     * Безопасно закрывает ресурсы базы данных.
     * 
     * Процесс закрытия:
     * 1. Проверка ресурсов
     *    - Валидация объектов
     *    - Проверка состояния
     *    - Подготовка к закрытию
     *    - Контроль зависимостей
     * 
     * 2. Закрытие ресурсов
     *    - Последовательное закрытие
     *    - Обработка ошибок
     *    - Освобождение памяти
     *    - Сброс состояния
     * 
     * 3. Обработка ошибок
     *    - Логирование проблем
     *    - Подавление исключений
     *    - Информирование системы
     *    - Восстановление состояния
     * 
     * Особенности:
     * - Игнорирование null-ресурсов
     * - Подавление исключений
     * - Поддержка AutoCloseable
     * - Безопасное закрытие
     * 
     * @param resources список ресурсов для закрытия
     */
    public static void close(AutoCloseable... resources) {
        for (AutoCloseable r : resources) {
            if (r != null) {
                try {
                    r.close();
                } catch (Exception ignored) {
                    // лог можем добавить при необходимости
                }
            }
        }
    }
}
