package otp.dao;

import otp.model.OtpConfig;

/**
 * Интерфейс для работы с конфигурацией OTP-кодов в базе данных.
 * 
 * Основные функции:
 * 1. Управление конфигурацией
 *    - Получение текущих настроек
 *    - Обновление параметров
 *    - Инициализация по умолчанию
 *    - Валидация значений
 *    - Контроль состояния
 * 
 * 2. Параметры конфигурации
 *    - Длина кода
 *    - Время жизни
 *    - Другие настройки
 *    - Ограничения
 *    - Значения по умолчанию
 * 
 * 3. Безопасность
 *    - Валидация параметров
 *    - Атомарные операции
 *    - Защита от потери данных
 *    - Контроль доступа
 *    - Аудит изменений
 * 
 * Процесс работы:
 * 1. Инициализация
 *    - Проверка наличия данных
 *    - Создание дефолтных значений
 *    - Валидация параметров
 *    - Сохранение в БД
 * 
 * 2. Управление настройками
 *    - Получение конфигурации
 *    - Обновление параметров
 *    - Проверка значений
 *    - Применение изменений
 * 
 * 3. Контроль состояния
 *    - Мониторинг изменений
 *    - Валидация данных
 *    - Обработка ошибок
 *    - Логирование операций
 * 
 * Безопасность:
 * - Валидация параметров
 * - Атомарные операции
 * - Защита от потери данных
 * - Контроль доступа
 * - Аудит изменений
 * - Резервное копирование
 */
public interface OtpConfigDao {

    /**
     * Получает текущую конфигурацию OTP.
     * 
     * Процесс получения:
     * 1. Подготовка запроса
     *    - Формирование SQL
     *    - Настройка параметров
     *    - Проверка кэша
     *    - Подготовка условий
     * 
     * 2. Выполнение запроса
     *    - Поиск в БД
     *    - Проверка результатов
     *    - Валидация данных
     *    - Обработка ошибок
     * 
     * 3. Возврат результата
     *    - Формирование объекта
     *    - Проверка состояния
     *    - Логирование
     *    - Возврат данных
     * 
     * Особенности:
     * - В таблице должна быть ровно одна запись
     * - Кэширование не используется
     * - Атомарное чтение
     * - Проверка целостности
     * 
     * @return объект OtpConfig или null если запись отсутствует
     * @throws SQLException при ошибке БД
     */
    OtpConfig getConfig();

    /**
     * Обновляет параметры конфигурации OTP.
     * 
     * Процесс обновления:
     * 1. Валидация данных
     *    - Проверка значений
     *    - Контроль ограничений
     *    - Валидация параметров
     *    - Подготовка к обновлению
     * 
     * 2. Проверка состояния
     *    - Поиск записи
     *    - Проверка версии
     *    - Контроль доступа
     *    - Подготовка транзакции
     * 
     * 3. Обновление данных
     *    - Атомарное обновление
     *    - Проверка результата
     *    - Обработка ошибок
     *    - Логирование изменений
     * 
     * @param config объект OtpConfig с новыми значениями
     * @throws IllegalArgumentException если данные невалидны
     * @throws SQLException при ошибке БД
     */
    void updateConfig(OtpConfig config);

    /**
     * Инициализирует конфигурацию по умолчанию.
     * 
     * Процесс инициализации:
     * 1. Проверка состояния
     *    - Поиск записей
     *    - Проверка версии
     *    - Контроль доступа
     *    - Подготовка к созданию
     * 
     * 2. Создание конфигурации
     *    - Генерация значений
     *    - Валидация параметров
     *    - Подготовка данных
     *    - Формирование объекта
     * 
     * 3. Сохранение данных
     *    - Вставка в БД
     *    - Проверка результата
     *    - Обработка ошибок
     *    - Логирование
     * 
     * Применение:
     * - При первом запуске
     * - При отсутствии данных
     * - При сбросе конфигурации
     * - При восстановлении
     * 
     * @throws SQLException при ошибке БД
     */
    void initDefaultConfigIfEmpty();
}

