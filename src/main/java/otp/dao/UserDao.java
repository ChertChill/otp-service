package otp.dao;

import otp.model.User;
import java.util.List;

/**
 * Интерфейс для работы с пользователями в базе данных.
 * 
 * Основные функции:
 * 1. Управление пользователями
 *    - Создание новых
 *    - Поиск по параметрам
 *    - Удаление с каскадом
 *    - Обновление данных
 *    - Управление ролями
 * 
 * 2. Административные функции
 *    - Проверка наличия админов
 *    - Получение обычных пользователей
 *    - Управление ролями
 *    - Контроль доступа
 *    - Аудит операций
 * 
 * 3. Безопасность
 *    - Защита паролей
 *    - Контроль доступа
 *    - Каскадное удаление
 *    - Валидация данных
 *    - Логирование операций
 * 
 * Процесс работы:
 * 1. Создание пользователя
 *    - Валидация данных
 *    - Хеширование пароля
 *    - Проверка уникальности
 *    - Сохранение в БД
 * 
 * 2. Поиск пользователей
 *    - По логину
 *    - По ID
 *    - По роли
 *    - Фильтрация
 * 
 * 3. Управление данными
 *    - Обновление
 *    - Удаление
 *    - Каскадные операции
 *    - Очистка кэша
 * 
 * Безопасность:
 * - Защита паролей
 * - Контроль доступа
 * - Каскадное удаление
 * - Валидация данных
 * - Логирование операций
 * - Аудит действий
 */
public interface UserDao {

    /**
     * Создает нового пользователя.
     * 
     * Процесс создания:
     * 1. Валидация данных
     *    - Проверка логина
     *    - Валидация пароля
     *    - Контроль уникальности
     *    - Проверка роли
     * 
     * 2. Подготовка данных
     *    - Хеширование пароля
     *    - Генерация ID
     *    - Установка роли
     *    - Настройка параметров
     * 
     * 3. Сохранение в БД
     *    - Вставка записи
     *    - Проверка результата
     *    - Обработка ошибок
     *    - Обновление кэша
     * 
     * @param user объект User для вставки (id генерируется БД)
     * @throws IllegalArgumentException если данные невалидны
     * @throws SQLException при ошибке БД
     */
    void create(User user);

    /**
     * Ищет пользователя по логину.
     * 
     * Процесс поиска:
     * 1. Подготовка запроса
     *    - Валидация логина
     *    - Формирование SQL
     *    - Настройка параметров
     *    - Подготовка кэша
     * 
     * 2. Выполнение поиска
     *    - Поиск в БД
     *    - Проверка кэша
     *    - Обработка результата
     *    - Валидация данных
     * 
     * 3. Возврат результата
     *    - Проверка состояния
     *    - Формирование объекта
     *    - Обновление кэша
     *    - Логирование
     * 
     * @param username логин пользователя
     * @return найденный User или null если не найден
     * @throws IllegalArgumentException если логин невалиден
     * @throws SQLException при ошибке БД
     */
    User findByUsername(String username);

    /**
     * Ищет пользователя по ID.
     * 
     * Процесс поиска:
     * 1. Подготовка запроса
     *    - Валидация ID
     *    - Формирование SQL
     *    - Настройка параметров
     *    - Проверка кэша
     * 
     * 2. Выполнение поиска
     *    - Поиск в БД
     *    - Проверка кэша
     *    - Обработка результата
     *    - Валидация данных
     * 
     * 3. Возврат результата
     *    - Проверка состояния
     *    - Формирование объекта
     *    - Обновление кэша
     *    - Логирование
     * 
     * @param id идентификатор пользователя
     * @return найденный User или null
     * @throws IllegalArgumentException если ID невалиден
     * @throws SQLException при ошибке БД
     */
    User findById(Long id);

    /**
     * Получает список обычных пользователей.
     * 
     * Процесс получения:
     * 1. Подготовка запроса
     *    - Формирование SQL
     *    - Настройка фильтров
     *    - Подготовка сортировки
     *    - Проверка кэша
     * 
     * 2. Выполнение запроса
     *    - Поиск в БД
     *    - Фильтрация результатов
     *    - Сортировка данных
     *    - Валидация результатов
     * 
     * 3. Обработка результата
     *    - Формирование списка
     *    - Обновление кэша
     *    - Логирование
     *    - Возврат данных
     * 
     * Особенности:
     * - Исключение администраторов
     * - Сортировка по ID
     * - Проверка состояния
     * - Кэширование результатов
     * 
     * @return список пользователей без администраторов
     * @throws SQLException при ошибке БД
     */
    List<User> findAllUsersWithoutAdmins();

    /**
     * Проверяет наличие администраторов.
     * 
     * Процесс проверки:
     * 1. Подготовка запроса
     *    - Формирование SQL
     *    - Настройка параметров
     *    - Проверка кэша
     *    - Подготовка условий
     * 
     * 2. Выполнение проверки
     *    - Поиск в БД
     *    - Проверка результатов
     *    - Валидация данных
     *    - Обработка ошибок
     * 
     * 3. Возврат результата
     *    - Формирование ответа
     *    - Обновление кэша
     *    - Логирование
     *    - Возврат статуса
     * 
     * @return true если администратор уже есть
     * @throws SQLException при ошибке БД
     */
    boolean adminExists();

    /**
     * Удаляет пользователя и его данные.
     * 
     * Процесс удаления:
     * 1. Проверка зависимостей
     *    - Анализ связей
     *    - Проверка прав
     *    - Валидация операций
     *    - Подготовка к удалению
     * 
     * 2. Каскадное удаление
     *    - Удаление связанных данных
     *    - Очистка связей
     *    - Удаление пользователя
     *    - Проверка результатов
     * 
     * 3. Завершение операции
     *    - Очистка кэша
     *    - Логирование
     *    - Обновление статистики
     *    - Возврат результата
     * 
     * @param userId идентификатор удаляемого пользователя
     * @throws IllegalArgumentException если ID невалиден
     * @throws SQLException при ошибке БД
     */
    void delete(Long userId);
}
