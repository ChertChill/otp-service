package otp.model;

import java.util.Objects;

/**
 * Сущность конфигурации OTP-кодов.
 * 
 * Основные функции:
 * 1. Управление параметрами генерации
 *    - Длина кода
 *    - Символьный набор
 *    - Алгоритм генерации
 *    - Формат кода
 *    - Правила генерации
 * 
 * 2. Контроль времени жизни
 *    - TTL в секундах
 *    - Политики истечения
 *    - Автоматическая инвалидация
 *    - Обновление статусов
 *    - Очистка кэша
 * 
 * 3. Безопасность
 *    - Валидация параметров
 *    - Защита от брутфорса
 *    - Аудит изменений
 *    - Контроль доступа
 *    - Мониторинг использования
 * 
 * 4. Управление состоянием
 *    - Хранение настроек
 *    - Обновление конфигурации
 *    - Валидация значений
 *    - Контроль изменений
 *    - Логирование операций
 * 
 * Рекомендуемые конфигурации:
 * - Стандартная: length=6, ttlSeconds=300 (5 минут)
 *   * Баланс безопасности и удобства
 *   * Оптимальное время жизни
 *   * Стандартная длина кода
 *   * Широкое применение
 *   * Проверенная конфигурация
 * 
 * - Короткая: length=4, ttlSeconds=60 (1 минута)
 *   * Быстрая валидация
 *   * Минимальное время жизни
 *   * Короткий код
 *   * Для простых операций
 *   * Временное использование
 * 
 * - Длинная: length=8, ttlSeconds=600 (10 минут)
 *   * Повышенная безопасность
 *   * Длительное время жизни
 *   * Длинный код
 *   * Для важных операций
 *   * Максимальная защита
 * 
 * Ограничения:
 * - length: 4-8 символов
 *   * Минимум: 4 символа
 *   * Максимум: 8 символов
 *   * Только цифры
 *   * Без специальных символов
 *   * Без пробелов
 * 
 * - ttlSeconds: 60-600 секунд
 *   * Минимум: 60 секунд
 *   * Максимум: 600 секунд
 *   * Целое число
 *   * Положительное значение
 *   * В секундах
 */
public class OtpConfig {
    private Long id;
    private int length;      // количество символов в коде
    private int ttlSeconds;  // время жизни кода в секундах

    /**
     * Пустой конструктор для фреймворков и JDBC.
     * 
     * Используется при:
     * - Маппинге данных из БД
     * - Создании объектов через DI
     * - Сериализации/десериализации
     * - Тестировании
     * - Создании прототипов
     * 
     * Ограничения:
     * - Не инициализирует поля
     * - Требует последующей настройки
     * - Не проверяет валидность
     * - Для внутреннего использования
     * - Не для прямого создания
     */
    public OtpConfig() {
    }

    /**
     * Полный конструктор для создания новой конфигурации OTP.
     * 
     * Процесс создания:
     * 1. Валидация параметров
     *    - Проверка длины
     *    - Проверка TTL
     *    - Валидация ID
     *    - Проверка ограничений
     *    - Контроль значений
     * 
     * 2. Инициализация полей
     *    - Установка ID
     *    - Установка длины
     *    - Установка TTL
     *    - Проверка состояния
     *    - Логирование
     * 
     * 3. Проверка результата
     *    - Валидация объекта
     *    - Проверка целостности
     *    - Контроль состояния
     *    - Аудит создания
     *    - Возврат объекта
     * 
     * @param id уникальный идентификатор записи в БД
     * @param length количество символов в генерируемом коде (4-8)
     * @param ttlSeconds время жизни кода в секундах (60-600)
     * 
     * @throws IllegalArgumentException если параметры не соответствуют ограничениям
     */
    public OtpConfig(Long id, int length, int ttlSeconds) {
        this.id = id;
        this.length = length;
        this.ttlSeconds = ttlSeconds;
    }

    /**
     * Возвращает уникальный идентификатор конфигурации в БД.
     * 
     * Характеристики:
     * - Уникальный в системе
     * - Неизменяемый
     * - Автоинкрементный
     * - Положительный
     * - Long тип
     * 
     * @return идентификатор записи или null для новых объектов
     */
    public Long getId() {
        return id;
    }

    /**
     * Устанавливает уникальный идентификатор конфигурации.
     * 
     * Процесс установки:
     * 1. Валидация значения
     *    - Проверка типа
     *    - Проверка диапазона
     *    - Контроль уникальности
     *    - Проверка состояния
     *    - Валидация контекста
     * 
     * 2. Обновление поля
     *    - Установка значения
     *    - Проверка результата
     *    - Контроль изменений
     *    - Логирование
     *    - Аудит
     * 
     * @param id идентификатор записи в БД
     */
    public void setId(Long id) {
        this.id = id;
    }

    /**
     * Возвращает количество символов в генерируемом OTP-коде.
     * 
     * Характеристики:
     * - Целое число
     * - Диапазон: 4-8
     * - Положительное
     * - Неизменяемое
     * - Валидное значение
     * 
     * @return длина кода (4-8 символов)
     */
    public int getLength() {
        return length;
    }

    /**
     * Устанавливает количество символов в генерируемом OTP-коде.
     * 
     * Процесс установки:
     * 1. Валидация значения
     *    - Проверка диапазона
     *    - Проверка типа
     *    - Контроль ограничений
     *    - Валидация контекста
     *    - Проверка состояния
     * 
     * 2. Обновление поля
     *    - Установка значения
     *    - Проверка результата
     *    - Контроль изменений
     *    - Логирование
     *    - Аудит
     * 
     * @param length количество символов (4-8)
     * @throws IllegalArgumentException если длина не соответствует ограничениям
     */
    public void setLength(int length) {
        this.length = length;
    }

    /**
     * Возвращает время жизни OTP-кода в секундах.
     * 
     * Характеристики:
     * - Целое число
     * - Диапазон: 60-600
     * - Положительное
     * - В секундах
     * - Валидное значение
     * 
     * @return время жизни в секундах (60-600)
     */
    public int getTtlSeconds() {
        return ttlSeconds;
    }

    /**
     * Устанавливает время жизни OTP-кода в секундах.
     * 
     * Процесс установки:
     * 1. Валидация значения
     *    - Проверка диапазона
     *    - Проверка типа
     *    - Контроль ограничений
     *    - Валидация контекста
     *    - Проверка состояния
     * 
     * 2. Обновление поля
     *    - Установка значения
     *    - Проверка результата
     *    - Контроль изменений
     *    - Логирование
     *    - Аудит
     * 
     * @param ttlSeconds время жизни в секундах (60-600)
     * @throws IllegalArgumentException если время не соответствует ограничениям
     */
    public void setTtlSeconds(int ttlSeconds) {
        this.ttlSeconds = ttlSeconds;
    }

    /**
     * Сравнивает текущий объект с другим на равенство.
     * 
     * Процесс сравнения:
     * 1. Проверка ссылок
     *    - Сравнение this
     *    - Проверка null
     *    - Проверка типа
     *    - Валидация объекта
     *    - Подготовка к сравнению
     * 
     * 2. Сравнение полей
     *    - Сравнение id
     *    - Сравнение length
     *    - Сравнение ttlSeconds
     *    - Проверка равенства
     *    - Формирование результата
     * 
     * @param o объект для сравнения
     * @return true если объекты равны по всем полям
     */
    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;

        OtpConfig that = (OtpConfig) o;
        return length == that.length
                && ttlSeconds == that.ttlSeconds
                && Objects.equals(id, that.id);
    }

    /**
     * Возвращает хеш-код объекта.
     * 
     * Процесс вычисления:
     * 1. Подготовка данных
     *    - Сбор полей
     *    - Проверка значений
     *    - Валидация состояния
     *    - Подготовка к хешированию
     *    - Контроль целостности
     * 
     * 2. Вычисление хеша
     *    - Хеширование id
     *    - Хеширование length
     *    - Хеширование ttlSeconds
     *    - Комбинирование хешей
     *    - Возврат результата
     * 
     * @return хеш-код, вычисленный на основе всех полей
     */
    @Override
    public int hashCode() {
        return Objects.hash(id, length, ttlSeconds);
    }

    /**
     * Возвращает строковое представление объекта.
     * 
     * Процесс формирования:
     * 1. Подготовка данных
     *    - Сбор полей
     *    - Проверка значений
     *    - Валидация состояния
     *    - Подготовка к форматированию
     *    - Контроль целостности
     * 
     * 2. Форматирование строки
     *    - Добавление имени класса
     *    - Добавление id
     *    - Добавление length
     *    - Добавление ttlSeconds
     *    - Завершение строки
     * 
     * @return строка в формате "OtpConfig{id=X, length=Y, ttlSeconds=Z}"
     */
    @Override
    public String toString() {
        return "OtpConfig{" +
                "id=" + id +
                ", length=" + length +
                ", ttlSeconds=" + ttlSeconds +
                '}';
    }
}

