package otp.model;

import java.util.Objects;

/**
 * Сущность пользователя сервиса OTP.
 * 
 * Основные функции:
 * 1. Управление данными пользователя
 *    - Уникальный идентификатор
 *    - Учетные данные
 *    - Роль в системе
 *    - Статус активности
 *    - Метаданные
 *    - Атрибуты безопасности
 *    - Настройки доступа
 * 
 * 2. Безопасность
 *    - Хеширование паролей
 *    - Управление ролями
 *    - Контроль доступа
 *    - Аудит действий
 *    - Защита данных
 *    - Мониторинг активности
 *    - Предотвращение атак
 * 
 * 3. Аутентификация
 *    - Проверка учетных данных
 *    - Управление сессиями
 *    - Восстановление доступа
 *    - Блокировка при ошибках
 *    - Контроль попыток
 *    - Валидация входов
 *    - Логирование действий
 * 
 * 4. Управление доступом
 *    - Контроль привилегий
 *    - Разграничение прав
 *    - Проверка разрешений
 *    - Управление сессиями
 *    - Контроль активности
 *    - Мониторинг доступа
 *    - Аудит операций
 * 
 * Роли пользователей:
 * 1. ADMIN
 *    - Управление системой
 *    - Настройка OTP
 *    - Управление пользователями
 *    - Просмотр логов
 *    - Конфигурация безопасности
 *    - Мониторинг активности
 *    - Управление доступом
 * 
 * 2. USER
 *    - Работа с OTP
 *    - Личный кабинет
 *    - История операций
 *    - Настройки уведомлений
 *    - Управление профилем
 *    - Просмотр статистики
 *    - Настройка безопасности
 */
public class User {
    private Long id;
    private String username;
    private String passwordHash;
    private UserRole role;

    /**
     * Пустой конструктор для фреймворков и JDBC.
     * 
     * Используется при:
     * - Маппинге данных из БД
     * - Создании объектов через DI
     * - Сериализации/десериализации
     * - Тестировании
     * - Создании прототипов
     * 
     * Ограничения:
     * - Не инициализирует поля
     * - Требует последующей настройки
     * - Не проверяет валидность
     * - Для внутреннего использования
     * - Не для прямого создания
     */
    public User() {
    }

    /**
     * Полный конструктор для создания нового пользователя.
     * 
     * Процесс создания:
     * 1. Валидация параметров
     *    - Проверка ID
     *    - Валидация username
     *    - Проверка passwordHash
     *    - Валидация role
     *    - Проверка ограничений
     *    - Контроль уникальности
     *    - Валидация форматов
     * 
     * 2. Инициализация полей
     *    - Установка ID
     *    - Установка username
     *    - Установка passwordHash
     *    - Установка role
     *    - Проверка состояния
     *    - Контроль целостности
     *    - Логирование создания
     * 
     * 3. Проверка результата
     *    - Валидация объекта
     *    - Проверка целостности
     *    - Контроль состояния
     *    - Аудит создания
     *    - Логирование
     * 
     * @param id уникальный идентификатор пользователя в БД
     * @param username логин для аутентификации (должен быть уникальным)
     * @param passwordHash хеш пароля (должен быть предварительно зашифрован)
     * @param role роль пользователя (ADMIN или USER)
     * 
     * @throws IllegalArgumentException если параметры не соответствуют ограничениям
     */
    public User(Long id, String username, String passwordHash, UserRole role) {
        this.id = id;
        this.username = username;
        this.passwordHash = passwordHash;
        this.role = role;
    }

    /**
     * Возвращает уникальный идентификатор пользователя в БД.
     * 
     * Характеристики:
     * - Уникальный в системе
     * - Неизменяемый
     * - Автоинкрементный
     * - Положительный
     * - Long тип
     * 
     * @return идентификатор пользователя или null для новых объектов
     */
    public Long getId() {
        return id;
    }

    /**
     * Устанавливает уникальный идентификатор пользователя.
     * 
     * Процесс установки:
     * 1. Валидация значения
     *    - Проверка типа
     *    - Проверка диапазона
     *    - Контроль уникальности
     *    - Проверка состояния
     *    - Валидация контекста
     * 
     * 2. Обновление поля
     *    - Установка значения
     *    - Проверка результата
     *    - Контроль изменений
     *    - Логирование
     *    - Аудит
     * 
     * @param id идентификатор пользователя
     */
    public void setId(Long id) {
        this.id = id;
    }

    /**
     * Возвращает логин пользователя.
     * 
     * Характеристики:
     * - Уникальный в системе
     * - Неизменяемый
     * - Строковый тип
     * - Обязательное поле
     * - Форматированный
     * 
     * @return логин для аутентификации
     */
    public String getUsername() {
        return username;
    }

    /**
     * Устанавливает логин пользователя.
     * 
     * Процесс установки:
     * 1. Валидация значения
     *    - Проверка формата
     *    - Проверка длины
     *    - Контроль уникальности
     *    - Валидация символов
     *    - Проверка состояния
     * 
     * 2. Обновление поля
     *    - Установка значения
     *    - Проверка результата
     *    - Контроль изменений
     *    - Логирование
     *    - Аудит
     * 
     * @param username логин (должен быть уникальным в системе)
     * @throws IllegalArgumentException если логин не соответствует формату
     */
    public void setUsername(String username) {
        this.username = username;
    }

    /**
     * Возвращает хеш пароля пользователя.
     * 
     * Характеристики:
     * - Зашифрованный
     * - Неизменяемый
     * - Строковый тип
     * - Обязательное поле
     * - Безопасный формат
     * 
     * @return хеш пароля в зашифрованном виде
     */
    public String getPasswordHash() {
        return passwordHash;
    }

    /**
     * Устанавливает хеш пароля пользователя.
     * 
     * Процесс установки:
     * 1. Валидация значения
     *    - Проверка формата
     *    - Проверка алгоритма
     *    - Контроль длины
     *    - Валидация хеша
     *    - Проверка состояния
     * 
     * 2. Обновление поля
     *    - Установка значения
     *    - Проверка результата
     *    - Контроль изменений
     *    - Логирование
     *    - Аудит
     * 
     * @param passwordHash хеш пароля (должен быть предварительно зашифрован)
     * @throws IllegalArgumentException если хеш не соответствует формату
     */
    public void setPasswordHash(String passwordHash) {
        this.passwordHash = passwordHash;
    }

    /**
     * Возвращает роль пользователя в системе.
     * 
     * Характеристики:
     * - Enum тип
     * - Неизменяемый
     * - Обязательное поле
     * - Валидное значение
     * - Контролируемое
     * 
     * @return роль пользователя (ADMIN или USER)
     */
    public UserRole getRole() {
        return role;
    }

    /**
     * Устанавливает роль пользователя в системе.
     * 
     * Процесс установки:
     * 1. Валидация значения
     *    - Проверка типа
     *    - Проверка допустимости
     *    - Контроль переходов
     *    - Валидация контекста
     *    - Проверка состояния
     * 
     * 2. Обновление поля
     *    - Установка значения
     *    - Проверка результата
     *    - Контроль изменений
     *    - Логирование
     *    - Аудит
     * 
     * @param role роль пользователя (ADMIN или USER)
     * @throws IllegalArgumentException если роль не соответствует ограничениям
     */
    public void setRole(UserRole role) {
        this.role = role;
    }

    /**
     * Сравнивает текущий объект с другим на равенство.
     * 
     * Процесс сравнения:
     * 1. Проверка ссылок
     *    - Сравнение this
     *    - Проверка null
     *    - Проверка типа
     *    - Валидация объекта
     *    - Подготовка к сравнению
     * 
     * 2. Сравнение полей
     *    - Сравнение id
     *    - Сравнение username
     *    - Сравнение passwordHash
     *    - Сравнение role
     *    - Проверка равенства
     * 
     * @param o объект для сравнения
     * @return true если объекты равны по всем полям
     */
    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;

        User user = (User) o;
        return Objects.equals(id, user.id)
                && Objects.equals(username, user.username)
                && Objects.equals(passwordHash, user.passwordHash)
                && role == user.role;
    }

    /**
     * Возвращает хеш-код объекта.
     * 
     * Процесс вычисления:
     * 1. Подготовка данных
     *    - Сбор полей
     *    - Проверка значений
     *    - Валидация состояния
     *    - Подготовка к хешированию
     *    - Контроль целостности
     * 
     * 2. Вычисление хеша
     *    - Хеширование id
     *    - Хеширование username
     *    - Хеширование passwordHash
     *    - Хеширование role
     *    - Комбинирование хешей
     * 
     * @return хеш-код, вычисленный на основе всех полей
     */
    @Override
    public int hashCode() {
        return Objects.hash(id, username, passwordHash, role);
    }

    /**
     * Возвращает строковое представление объекта.
     * 
     * Процесс формирования:
     * 1. Подготовка данных
     *    - Сбор полей
     *    - Проверка значений
     *    - Валидация состояния
     *    - Подготовка к форматированию
     *    - Контроль целостности
     * 
     * 2. Форматирование строки
     *    - Добавление имени класса
     *    - Добавление id
     *    - Добавление username
     *    - Добавление role
     *    - Завершение строки
     * 
     * @return строка в формате "User{id=X, username=Y, role=Z}"
     *         Пароль не включается в вывод из соображений безопасности
     */
    @Override
    public String toString() {
        return "User{" +
                "id=" + id +
                ", username='" + username + '\'' +
                ", role=" + role +
                '}';
    }
}
